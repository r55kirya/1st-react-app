{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepEqual.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","undefined","_toConsumableArray","arr","arrayLikeToArray","iter","Object","from","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isObject","isNaN","data","val","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","errors","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","getTime","Set","Map","get","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","fieldArrayValue","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext","displayName","React.useContext","_unsupportedIterableToArray","minLen","prototype","toString","call","constructor","_arrayLikeToArray","len","arr2","_slicedToArray","_arr","_n","_d","_s","_i","module","exports","runtime","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","defineProperty","enumerable","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","Context","_invoke","GenStateSuspendedStart","method","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","GenStateSuspendedYield","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function"],"mappings":"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","file":"static/js/0.58cc447f.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return valueAsNumber\n      ? +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(shallowFieldsStateRef.current, name, { ...value });\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            !fieldArrayValue.length ||\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n"],"sourceRoot":""}